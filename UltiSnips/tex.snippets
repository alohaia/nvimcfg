# A valid snippet should starts with:
#
#        snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#        endsnippet
#
# Snippet options:
#
#        b - Beginning of line.
#        i - In-word expansion.
#        w - Word boundary.
#        r - Regular expression
#        e - Custom context snippet
#        A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#        snippet emitter "emitter properties" b
#        private readonly ${1} = new Emitter<$2>()
#        public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#        endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

# 定义一个函数，将 # context "math()" 添加到 snippet 上面，使其只能在公式块中生效
global !p
# texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C',
# 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
# 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]
#
# texIgnoreMathZones = ['texMathText']
#
# texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
# texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
#
# ignore = texIgnoreMathZoneIds[0]
#
# def math():
#     synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
#     try:
#         first = next(
#             i for i in reversed(synstackids)
#             if i in texIgnoreMathZoneIds or i in texMathZoneIds
#         )
#         return first != ignore
#     except StopIteration:
#         return False

def math():
    # try:
    #     vim.eval("synIDattr(synstack(line(\".\"), col(\".\"))[0], \"name\")") == "texMathZone"
    #     return True
    # except StopIteration:
    #     return False
	return True

endglobal

snippet beg "begin{} / end{}" bA
\begin{$1}
    $0
\end{$1}
endsnippet

# snippet sign "Signature"
# Yours sincerely,
#
# Qihuan Liu
# endsnippet

# snippet today "Date"
# `date +%F`
# endsnippet

# snippet box "Box"
# `!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
# │ $1 │
# `!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
# $0
# endsnippet

# Snippets for math
# snippet mk "Math" wA
snippet mk "Math" w
$${1}$`!p if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''`$0
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
.\]$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

# context "math()"
snippet sr "^2" iA
^2
endsnippet

# context "math()"
snippet cb "^3" iA
^3
endsnippet

# context "math()"
snippet compl "complement" iA
^{c}
endsnippet

# context "math()"
snippet td "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
    if stripped[i] == ')': depth += 1
    if stripped[i] == '(': depth -= 1
    if depth == 0: break;
    i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# context "math()"
snippet "([A-z0-9])?/" "Fraction" irA
\\frac{${1:`!p
if match.group(1)==None:
    snip.rv=''
else:
    snip.rv=match.group(1)`}}{$2}$0
endsnippet

# 例如 sympy Tab 键扩展为 sympy | sympy，sympy 1 + 1 sympy Tab 键扩展为 2。
snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet

# # Math­e­mat­i­ca 用户也可以进行类似的操作：
# priority 1000
# snippet math "mathematica block" w
# math $1 math$0
# endsnippet
#
# priority 10000
# snippet 'math(.*)math' "evaluate mathematica" wr
# `!p
# import subprocess
# code = 'ToString[' + match.group(1) + ', TeXForm]'
# snip.rv = subprocess.check_output(['wolframscript', '-code', code])
# `
# endsnippet

# 后缀
# context "math()"
priority 10
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

# context "math()"
priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet


# context "math()"
# priority 10
# snippet "hat" "hat" riA
# \hat{$1}$0
# endsnippet

# context "math()"
priority 100
snippet "([a-zA-Z])?hat" "hat" riA
\hat{${1:`!p
if match.group(1)==None:
    snip.rv=''
else:
    snip.rv=match.group(1)`}}
endsnippet


# context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet
